class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        queue<pair<int,int>> q;
        
        int cnt=0;
        
        for(int i=0;i<grid.size();i++) {
            for(int j=0;j<grid[i].size();j++) {
                if(grid[i][j]==2) {
                    q.push(make_pair(i,j));
                }
                else if(grid[i][j]==1) {
                    cnt++;
                }
            }
        }
        
        if(cnt==0)  return 0;
        int row[]={0,1,0,-1};
        int col[]={1,0,-1,0};
        int res=0;
        while(!q.empty()) {
            res++;
            int s=q.size();
            while(s--) {
                auto r=q.front().first;
                auto c=q.front().second;
                q.pop();
                for(int i=0;i<4;i++) {
                    int m=r+row[i];
                    int n=c+col[i];
                    if(m>=0 and m<grid.size() and n>=0 and n<grid[0].size()) {
                        if(grid[m][n]==1) {
                            grid[m][n]=2;
                            --cnt;
                            q.push(make_pair(m,n));
                        }
                    }
                }
            }
            if(cnt==0) return res;
        }
        return -1;    
    }
};
